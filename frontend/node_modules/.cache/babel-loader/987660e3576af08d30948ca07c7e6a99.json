{"ast":null,"code":"import _inherits from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/bryanlo/Projects/Immigration Law Dashboard/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\n/** @ignore */\n\nvar Footer_ = /*#__PURE__*/function () {\n  function Footer_(schema) {\n    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n    var recordBatches = arguments.length > 2 ? arguments[2] : undefined;\n    var dictionaryBatches = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, Footer_);\n\n    this.schema = schema;\n    this.version = version;\n    recordBatches && (this._recordBatches = recordBatches);\n    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n  }\n  /** @nocollapse */\n\n\n  _createClass(Footer_, [{\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._recordBatches.length;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._dictionaryBatches.length;\n    }\n  }, {\n    key: \"recordBatches\",\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function recordBatches() {\n      var block, i, n;\n      return _regeneratorRuntime().wrap(function recordBatches$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              i = -1, n = this.numRecordBatches;\n\n            case 1:\n              if (!(++i < n)) {\n                _context.next = 7;\n                break;\n              }\n\n              if (!(block = this.getRecordBatch(i))) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 5;\n              return block;\n\n            case 5:\n              _context.next = 1;\n              break;\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, recordBatches, this);\n    })\n  }, {\n    key: \"dictionaryBatches\",\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function dictionaryBatches() {\n      var block, i, n;\n      return _regeneratorRuntime().wrap(function dictionaryBatches$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              i = -1, n = this.numDictionaries;\n\n            case 1:\n              if (!(++i < n)) {\n                _context2.next = 7;\n                break;\n              }\n\n              if (!(block = this.getDictionaryBatch(i))) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 5;\n              return block;\n\n            case 5:\n              _context2.next = 1;\n              break;\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, dictionaryBatches, this);\n    })\n  }, {\n    key: \"getRecordBatch\",\n    value: function getRecordBatch(index) {\n      return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;\n    }\n  }, {\n    key: \"getDictionaryBatch\",\n    value: function getDictionaryBatch(index) {\n      return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(buf) {\n      buf = new ByteBuffer(toUint8Array(buf));\n\n      var footer = _Footer.getRootAsFooter(buf);\n\n      var schema = Schema.decode(footer.schema());\n      return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"encode\",\n    value: function encode(footer) {\n      var b = new Builder();\n      var schemaOffset = Schema.encode(b, footer.schema);\n\n      _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n\n      _toConsumableArray(footer.recordBatches()).slice().reverse().forEach(function (rb) {\n        return FileBlock.encode(b, rb);\n      });\n\n      var recordBatchesOffset = b.endVector();\n\n      _Footer.startDictionariesVector(b, footer.numDictionaries);\n\n      _toConsumableArray(footer.dictionaryBatches()).slice().reverse().forEach(function (db) {\n        return FileBlock.encode(b, db);\n      });\n\n      var dictionaryBatchesOffset = b.endVector();\n\n      _Footer.startFooter(b);\n\n      _Footer.addSchema(b, schemaOffset);\n\n      _Footer.addVersion(b, MetadataVersion.V4);\n\n      _Footer.addRecordBatches(b, recordBatchesOffset);\n\n      _Footer.addDictionaries(b, dictionaryBatchesOffset);\n\n      _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n      return b.asUint8Array();\n    }\n  }]);\n\n  return Footer_;\n}();\n\nexport { Footer_ as Footer };\n/** @ignore */\n\nvar OffHeapFooter = /*#__PURE__*/function (_Footer_) {\n  _inherits(OffHeapFooter, _Footer_);\n\n  var _super = _createSuper(OffHeapFooter);\n\n  function OffHeapFooter(schema, _footer) {\n    var _this;\n\n    _classCallCheck(this, OffHeapFooter);\n\n    _this = _super.call(this, schema, _footer.version());\n    _this._footer = _footer;\n    return _this;\n  }\n\n  _createClass(OffHeapFooter, [{\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer.recordBatchesLength();\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer.dictionariesLength();\n    }\n  }, {\n    key: \"getRecordBatch\",\n    value: function getRecordBatch(index) {\n      if (index >= 0 && index < this.numRecordBatches) {\n        var fileBlock = this._footer.recordBatches(index);\n\n        if (fileBlock) {\n          return FileBlock.decode(fileBlock);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getDictionaryBatch\",\n    value: function getDictionaryBatch(index) {\n      if (index >= 0 && index < this.numDictionaries) {\n        var fileBlock = this._footer.dictionaries(index);\n\n        if (fileBlock) {\n          return FileBlock.decode(fileBlock);\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return OffHeapFooter;\n}(Footer_);\n/** @ignore */\n\n\nexport var FileBlock = /*#__PURE__*/function () {\n  function FileBlock(metaDataLength, bodyLength, offset) {\n    _classCallCheck(this, FileBlock);\n\n    this.metaDataLength = metaDataLength;\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n\n  _createClass(FileBlock, null, [{\n    key: \"decode\",\n    value:\n    /** @nocollapse */\n    function decode(block) {\n      return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"encode\",\n    value: function encode(b, fileBlock) {\n      var metaDataLength = fileBlock.metaDataLength;\n      var offset = new Long(fileBlock.offset, 0);\n      var bodyLength = new Long(fileBlock.bodyLength, 0);\n      return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n  }]);\n\n  return FileBlock;\n}();","map":{"version":3,"mappings":"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","names":["File_","flatbuffers","Long","Builder","ByteBuffer","_Block","org","apache","arrow","flatbuf","Block","_Footer","Footer","Schema","MetadataVersion","toUint8Array","Footer_","schema","version","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","length","i","n","numRecordBatches","block","getRecordBatch","numDictionaries","getDictionaryBatch","index","buf","footer","getRootAsFooter","decode","OffHeapFooter","b","schemaOffset","encode","startRecordBatchesVector","slice","reverse","forEach","rb","FileBlock","recordBatchesOffset","endVector","startDictionariesVector","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","asUint8Array","_footer","recordBatchesLength","dictionariesLength","fileBlock","dictionaries","metaDataLength","bodyLength","offset","low","createBlock"],"sources":["ipc/metadata/file.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}