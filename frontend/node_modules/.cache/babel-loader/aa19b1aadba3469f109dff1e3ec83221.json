{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n/** @ignore */\n\nexport class JSONTypeAssembler extends Visitor {\n  visit(node) {\n    return node == null ? undefined : super.visit(node);\n  }\n\n  visitNull({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitInt({\n    typeId,\n    bitWidth,\n    isSigned\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'bitWidth': bitWidth,\n      'isSigned': isSigned\n    };\n  }\n\n  visitFloat({\n    typeId,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'precision': Precision[precision]\n    };\n  }\n\n  visitBinary({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitBool({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitUtf8({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitDecimal({\n    typeId,\n    scale,\n    precision\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'scale': scale,\n      'precision': precision\n    };\n  }\n\n  visitDate({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': DateUnit[unit]\n    };\n  }\n\n  visitTime({\n    typeId,\n    unit,\n    bitWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      bitWidth\n    };\n  }\n\n  visitTimestamp({\n    typeId,\n    timezone,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      timezone\n    };\n  }\n\n  visitInterval({\n    typeId,\n    unit\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': IntervalUnit[unit]\n    };\n  }\n\n  visitList({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitStruct({\n    typeId\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n\n  visitUnion({\n    typeId,\n    mode,\n    typeIds\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'mode': UnionMode[mode],\n      'typeIds': [...typeIds]\n    };\n  }\n\n  visitDictionary(node) {\n    return this.visit(node.dictionary);\n  }\n\n  visitFixedSizeBinary({\n    typeId,\n    byteWidth\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'byteWidth': byteWidth\n    };\n  }\n\n  visitFixedSizeList({\n    typeId,\n    listSize\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'listSize': listSize\n    };\n  }\n\n  visitMap({\n    typeId,\n    keysSorted\n  }) {\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'keysSorted': keysSorted\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Visitor","ArrowType","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","JSONTypeAssembler","visit","node","undefined","visitNull","typeId","toLowerCase","visitInt","bitWidth","isSigned","visitFloat","precision","visitBinary","visitBool","visitUtf8","visitDecimal","scale","visitDate","unit","visitTime","visitTimestamp","timezone","visitInterval","visitList","visitStruct","visitUnion","mode","typeIds","visitDictionary","dictionary","visitFixedSizeBinary","byteWidth","visitFixedSizeList","listSize","visitMap","keysSorted"],"sources":["visitor/jsontypeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}