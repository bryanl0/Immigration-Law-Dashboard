{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { uint16ToFloat64 } from '../util/math';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\n\nexport class GetVisitor extends Visitor {}\n/** @ignore */\n\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */\n\n\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * data[index + 1] + (data[index] >>> 0);\n/** @ignore */\n\n\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n/** @ignore */\n\n\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n/** @ignore */\n\n\nconst epochMillisecondsToDate = epochMs => new Date(epochMs);\n/** @ignore */\n\n\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */\n\n\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\n\n\nconst getNull = (_vector, _index) => null;\n/** @ignore */\n\n\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n  const {\n    [index]: x,\n    [index + 1]: y\n  } = valueOffsets;\n  return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\n\n\nconst getBool = ({\n  offset,\n  values\n}, index) => {\n  const idx = offset + index;\n  const byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\n\n\nconst getDateDay = ({\n  values\n}, index) => epochDaysToDate(values, index);\n/** @ignore */\n\n\nconst getDateMillisecond = ({\n  values\n}, index) => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\n\n\nconst getNumeric = ({\n  stride,\n  values\n}, index) => values[stride * index];\n/** @ignore */\n\n\nconst getFloat16 = ({\n  stride,\n  values\n}, index) => uint16ToFloat64(values[stride * index]);\n/** @ignore */\n\n\nconst getBigInts = ({\n  stride,\n  values,\n  type\n}, index) => BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\n\n\nconst getFixedSizeBinary = ({\n  stride,\n  values\n}, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\n\n\nconst getBinary = ({\n  values,\n  valueOffsets\n}, index) => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\n\n\nconst getUtf8 = ({\n  values,\n  valueOffsets\n}, index) => {\n  const bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getInt = (vector, index) => vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getFloat = (vector, index) => vector.type.precision !== Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getDate = (vector, index) => vector.type.unit === DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);\n/** @ignore */\n\n\nconst getTimestampSecond = ({\n  values\n}, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\n\n\nconst getTimestampMillisecond = ({\n  values\n}, index) => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\n\n\nconst getTimestampMicrosecond = ({\n  values\n}, index) => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\n\n\nconst getTimestampNanosecond = ({\n  values\n}, index) => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getTimestamp = (vector, index) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(vector, index);\n\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(vector, index);\n\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(vector, index);\n\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(vector, index);\n  }\n};\n/** @ignore */\n\n\nconst getTimeSecond = ({\n  values,\n  stride\n}, index) => values[stride * index];\n/** @ignore */\n\n\nconst getTimeMillisecond = ({\n  values,\n  stride\n}, index) => values[stride * index];\n/** @ignore */\n\n\nconst getTimeMicrosecond = ({\n  values\n}, index) => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\n\n\nconst getTimeNanosecond = ({\n  values\n}, index) => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getTime = (vector, index) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(vector, index);\n\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(vector, index);\n\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(vector, index);\n\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(vector, index);\n  }\n};\n/** @ignore */\n\n\nconst getDecimal = ({\n  values\n}, index) => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n/** @ignore */\n\n\nconst getList = (vector, index) => {\n  const child = vector.getChildAt(0),\n        {\n    valueOffsets,\n    stride\n  } = vector;\n  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);\n};\n/** @ignore */\n\n\nconst getMap = (vector, index) => {\n  return vector.bind(index);\n};\n/** @ignore */\n\n\nconst getStruct = (vector, index) => {\n  return vector.bind(index);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getUnion = (vector, index) => {\n  return vector.type.mode === UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);\n};\n/** @ignore */\n\n\nconst getDenseUnion = (vector, index) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\n\n\nconst getSparseUnion = (vector, index) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  return child ? child.get(index) : null;\n};\n/** @ignore */\n\n\nconst getDictionary = (vector, index) => {\n  return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst getInterval = (vector, index) => vector.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);\n/** @ignore */\n\n\nconst getIntervalDayTime = ({\n  values\n}, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\n\n\nconst getIntervalYearMonth = ({\n  values\n}, index) => {\n  const interval = values[index];\n  const int32s = new Int32Array(2);\n  int32s[0] = interval / 12 | 0;\n  /* years */\n\n  int32s[1] = interval % 12 | 0;\n  /* months */\n\n  return int32s;\n};\n/** @ignore */\n\n\nconst getFixedSizeList = (vector, index) => {\n  const child = vector.getChildAt(0),\n        {\n    stride\n  } = vector;\n  return child.slice(index * stride, (index + 1) * stride);\n};\n\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\n\nexport const instance = new GetVisitor();","map":{"version":3,"mappings":"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","names":["BN","Visitor","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","epochDaysToMs","data","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_vector","_index","getVariableWidthBytes","values","valueOffsets","x","y","subarray","getBool","offset","idx","byte","getDateDay","getDateMillisecond","getNumeric","stride","getFloat16","getBigInts","type","new","isSigned","getFixedSizeBinary","getBinary","getUtf8","bytes","getInt","vector","bitWidth","getFloat","precision","HALF","getDate","unit","DAY","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","signed","getTimeNanosecond","getTime","getDecimal","decimal","getList","child","getChildAt","slice","getMap","bind","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","get","getDictionary","getValue","getKey","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","interval","int32s","Int32Array","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"]},"metadata":{},"sourceType":"module"}