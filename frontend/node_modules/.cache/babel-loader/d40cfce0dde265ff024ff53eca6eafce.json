{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes, ...args) {\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n\n  visit(...args) {\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n\n  getVisitFn(node, throwIfNotFound = true) {\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n\n  visitNull(_node, ..._args) {\n    return null;\n  }\n\n  visitBool(_node, ..._args) {\n    return null;\n  }\n\n  visitInt(_node, ..._args) {\n    return null;\n  }\n\n  visitFloat(_node, ..._args) {\n    return null;\n  }\n\n  visitUtf8(_node, ..._args) {\n    return null;\n  }\n\n  visitBinary(_node, ..._args) {\n    return null;\n  }\n\n  visitFixedSizeBinary(_node, ..._args) {\n    return null;\n  }\n\n  visitDate(_node, ..._args) {\n    return null;\n  }\n\n  visitTimestamp(_node, ..._args) {\n    return null;\n  }\n\n  visitTime(_node, ..._args) {\n    return null;\n  }\n\n  visitDecimal(_node, ..._args) {\n    return null;\n  }\n\n  visitList(_node, ..._args) {\n    return null;\n  }\n\n  visitStruct(_node, ..._args) {\n    return null;\n  }\n\n  visitUnion(_node, ..._args) {\n    return null;\n  }\n\n  visitDictionary(_node, ..._args) {\n    return null;\n  }\n\n  visitInterval(_node, ..._args) {\n    return null;\n  }\n\n  visitFixedSizeList(_node, ..._args) {\n    return null;\n  }\n\n  visitMap(_node, ..._args) {\n    return null;\n  }\n\n}\n/** @ignore */\n\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n  let fn = null;\n  let dtype = Type.NONE; // tslint:disable\n\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\n\n\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n\n      return Type.Int;\n\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n\n        case Precision.SINGLE:\n          return Type.Float32;\n\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n\n      return Type.Float;\n\n    case Type.Binary:\n      return Type.Binary;\n\n    case Type.Utf8:\n      return Type.Utf8;\n\n    case Type.Bool:\n      return Type.Bool;\n\n    case Type.Decimal:\n      return Type.Decimal;\n\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n\n      return Type.Time;\n\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n\n      return Type.Timestamp;\n\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n\n      return Type.Date;\n\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n\n      return Type.Interval;\n\n    case Type.Map:\n      return Type.Map;\n\n    case Type.List:\n      return Type.List;\n\n    case Type.Struct:\n      return Type.Struct;\n\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n\n      return Type.Union;\n\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"mappings":"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","names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","visitMany","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","visitNull","_node","_args","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","fn","dtype","NONE","inferDType","type","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}